/*
 * Sunshine Conversations API
 * #  <aside class=\"notice\">As a stepping stone to new and greater things, weâ€™ve released an update to the SunCo API, which is v2. For users wanting to access v1, please proceed <a href=\"https://docs.smooch.io/rest/\">here</a>.  </aside>  # Introduction  Welcome to the Sunshine Conversations API. The API allows you to craft entirely unique messaging experiences for your app and website as well as talk to any backend or external service.  The Sunshine Conversations API is designed according to REST principles. The API accepts JSON in request bodies and requires that the content-type: application/json header be specified for  all such requests. The API will always respond with an object. Depending on context, resources may be returned as single objects or as arrays of objects, nested within the response object.  In some cases, the API will also facilitate cross-origin resource sharing so that it can be called from a web application.  <aside class=\"notice\">Note that for authenticated requests, cross-origin resource sharing is only available to appUser scoped credentials. Attempting to call the API from the browser using  app or account scoped credentials will result in a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">same-origin policy</a> browser error. For more information, refer  to the <a href=\"http://docs.smooch.io/guide/authorization/#handle-credentials-with-caution\">Authorization guide</a>.</aside>  ## API pagination and records limits  Some APIs can be paginated by providing the offset query string parameter. The offset is the number of initial records to skip before picking records to return. Default 0. The limit query string can also be provided to change the number of records to return (maximum 100, default 25)    Sunshine Conversations is available in the following regions. Each Sunshine Conversations region has its own API host.  ## Regions  | Region         | Host                       | | -------------- | -------------------------- | | United States  | https://api.smooch.io      | | European Union | https://api.eu-1.smooch.io |    For more information on regions, visit [the guide](/guide/regions/).    <aside class=\"notice\">When configuring an API host, make sure to always use `https`. Some API clients can have unexpected behaviour when following redirects from `http` to `https`.</aside> 
 *
 * The version of the OpenAPI document: 6.0.0-alpha
 * Contact: hello@smooch.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.smooch.v2.client.api;

import io.smooch.v2.client.ApiException;
import io.smooch.v2.client.model.ParticipantJoinBody;
import io.smooch.v2.client.model.ParticipantLeaveBody;
import io.smooch.v2.client.model.ParticipantListResponse;
import io.smooch.v2.client.model.ParticipantResponse;
import io.smooch.v2.client.model.ParticipantSubSchema;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ParticipantsApi
 */
public class ParticipantsApiTest {

    private final ParticipantsApi api = new ParticipantsApi();

    /**
     * Join Conversation
     *
     * Adds a user to a conversation using either their userId or userExternalId. The endpoint only supports adding a participant to a sdkGroup conversation. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void joinConversationTest() throws ApiException {
        //
        //ParticipantJoinBody participantJoinBody = null;
        //
        //String appId = null;
        //
        //String conversationId = null;
        //
        //ParticipantResponse response = api.joinConversation(participantJoinBody, appId, conversationId);

        // TODO: test validations
    }
    /**
     * Leave Conversation
     *
     * Removes a user from a conversation using either their userId, userExternalId, or participantId. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void leaveConversationTest() throws ApiException {
        //
        //ParticipantLeaveBody participantLeaveBody = null;
        //
        //String appId = null;
        //
        //String conversationId = null;
        //
        //Object response = api.leaveConversation(participantLeaveBody, appId, conversationId);

        // TODO: test validations
    }
    /**
     * List Participants
     *
     * Lists all the participants of a particular conversation. This API is paginated. This endpoint has no v1 equivalent 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listParticipantsTest() throws ApiException {
        //
        //String appId = null;
        //
        //String conversationId = null;
        //
        //Integer limit = null;
        //
        //Integer offset = null;
        //
        //ParticipantListResponse response = api.listParticipants(appId, conversationId, limit, offset);

        // TODO: test validations
    }
}
