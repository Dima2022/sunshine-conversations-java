/*
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 9.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zendesk.sunshine_conversations_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zendesk.sunshine_conversations_client.model.Author;
import com.zendesk.sunshine_conversations_client.model.Content;
import com.zendesk.sunshine_conversations_client.model.Destination;
import com.zendesk.sunshine_conversations_client.model.MessageOverride;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * MessagePost
 */
@JsonPropertyOrder({
  MessagePost.JSON_PROPERTY_AUTHOR,
  MessagePost.JSON_PROPERTY_CONTENT,
  MessagePost.JSON_PROPERTY_DESTINATION,
  MessagePost.JSON_PROPERTY_METADATA,
  MessagePost.JSON_PROPERTY_OVERRIDE,
  MessagePost.JSON_PROPERTY_MESSAGE_SCHEMA
})

public class MessagePost {
  public static final String JSON_PROPERTY_AUTHOR = "author";
  private Author author = null;

  public static final String JSON_PROPERTY_CONTENT = "content";
  private Content content = null;

  public static final String JSON_PROPERTY_DESTINATION = "destination";
  private Destination destination = null;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private JsonNullable<Object> metadata = JsonNullable.<Object>undefined();

  public static final String JSON_PROPERTY_OVERRIDE = "override";
  private MessageOverride override = null;

  public static final String JSON_PROPERTY_MESSAGE_SCHEMA = "messageSchema";
  private String messageSchema;


  public MessagePost author(Author author) {
    
    this.author = author;
    return this;
  }

   /**
   * The author of the message.
   * @return author
  **/
  @ApiModelProperty(required = true, value = "The author of the message.")
  @JsonProperty(JSON_PROPERTY_AUTHOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Author getAuthor() {
    return author;
  }


  public void setAuthor(Author author) {
    this.author = author;
  }


  public MessagePost content(Content content) {
    
    this.content = content;
    return this;
  }

   /**
   * The content of the message.
   * @return content
  **/
  @ApiModelProperty(required = true, value = "The content of the message.")
  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Content getContent() {
    return content;
  }


  public void setContent(Content content) {
    this.content = content;
  }


  public MessagePost destination(Destination destination) {
    
    this.destination = destination;
    return this;
  }

   /**
   * Get destination
   * @return destination
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Destination getDestination() {
    return destination;
  }


  public void setDestination(Destination destination) {
    this.destination = destination;
  }


  public MessagePost metadata(Object metadata) {
    this.metadata = JsonNullable.<Object>of(metadata);
    
    return this;
  }

   /**
   * Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. 
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"lang\":\"en-ca\"}", value = "Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. ")
  @JsonIgnore

  public Object getMetadata() {
        return metadata.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMetadata_JsonNullable() {
    return metadata;
  }
  
  @JsonProperty(JSON_PROPERTY_METADATA)
  public void setMetadata_JsonNullable(JsonNullable<Object> metadata) {
    this.metadata = metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = JsonNullable.<Object>of(metadata);
  }


  public MessagePost override(MessageOverride override) {
    
    this.override = override;
    return this;
  }

   /**
   * Get override
   * @return override
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OVERRIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MessageOverride getOverride() {
    return override;
  }


  public void setOverride(MessageOverride override) {
    this.override = override;
  }


  public MessagePost messageSchema(String messageSchema) {
    
    this.messageSchema = messageSchema;
    return this;
  }

   /**
   * Send WhatsApp Message Templates using \&quot;whatsapp\&quot;, while populating the message key using the native [WhatsApp schema](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates). When the &#x60;messageSchema&#x60; is specified, the message is automatically converted to the Sunshine Conversations schema to be stored in the conversation record. The Sunshine Conversations message schema is also used in the API response. Go to [Post Message API](https://docs.smooch.io/guide/whatsapp/#post-message-api) to view an example. 
   * @return messageSchema
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "whatsapp", value = "Send WhatsApp Message Templates using \"whatsapp\", while populating the message key using the native [WhatsApp schema](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates). When the `messageSchema` is specified, the message is automatically converted to the Sunshine Conversations schema to be stored in the conversation record. The Sunshine Conversations message schema is also used in the API response. Go to [Post Message API](https://docs.smooch.io/guide/whatsapp/#post-message-api) to view an example. ")
  @JsonProperty(JSON_PROPERTY_MESSAGE_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMessageSchema() {
    return messageSchema;
  }


  public void setMessageSchema(String messageSchema) {
    this.messageSchema = messageSchema;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessagePost messagePost = (MessagePost) o;
    return Objects.equals(this.author, messagePost.author) &&
        Objects.equals(this.content, messagePost.content) &&
        Objects.equals(this.destination, messagePost.destination) &&
        Objects.equals(this.metadata, messagePost.metadata) &&
        Objects.equals(this.override, messagePost.override) &&
        Objects.equals(this.messageSchema, messagePost.messageSchema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, content, destination, metadata, override, messageSchema);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessagePost {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    override: ").append(toIndentedString(override)).append("\n");
    sb.append("    messageSchema: ").append(toIndentedString(messageSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

