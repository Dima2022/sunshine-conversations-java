/*
 * Smooch
 * The Smooch API is a unified interface for powering messaging in your customer experiences across every channel. Our API speeds access to new markets, reduces time to ship, eliminates complexity, and helps you build the best experiences for your customers. For more information, visit our [official documentation](https://docs.smooch.io).
 *
 * OpenAPI spec version: 5.29
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.smooch.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.smooch.client.model.Author;
import io.smooch.client.model.NotificationPostDestination;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * NotificationPost
 */

public class NotificationPost {
  @SerializedName("destination")
  private NotificationPostDestination destination = null;

  @SerializedName("messageSchema")
  private String messageSchema = null;

  @SerializedName("author")
  private Author author = null;

  @SerializedName("message")
  private Object message = null;

  public NotificationPost destination(NotificationPostDestination destination) {
    this.destination = destination;
    return this;
  }

   /**
   * The destination of the notification.
   * @return destination
  **/
  @ApiModelProperty(required = true, value = "The destination of the notification.")
  public NotificationPostDestination getDestination() {
    return destination;
  }

  public void setDestination(NotificationPostDestination destination) {
    this.destination = destination;
  }

  public NotificationPost messageSchema(String messageSchema) {
    this.messageSchema = messageSchema;
    return this;
  }

   /**
   * If specified, the only accepted value is `whatsapp`. To be included when sending WhatsApp message templates.
   * @return messageSchema
  **/
  @ApiModelProperty(value = "If specified, the only accepted value is `whatsapp`. To be included when sending WhatsApp message templates.")
  public String getMessageSchema() {
    return messageSchema;
  }

  public void setMessageSchema(String messageSchema) {
    this.messageSchema = messageSchema;
  }

  public NotificationPost author(Author author) {
    this.author = author;
    return this;
  }

   /**
   * An object containing role, email, name and avatarUrl.
   * @return author
  **/
  @ApiModelProperty(required = true, value = "An object containing role, email, name and avatarUrl.")
  public Author getAuthor() {
    return author;
  }

  public void setAuthor(Author author) {
    this.author = author;
  }

  public NotificationPost message(Object message) {
    this.message = message;
    return this;
  }

   /**
   * The notification message to send.
   * @return message
  **/
  @ApiModelProperty(required = true, value = "The notification message to send.")
  public Object getMessage() {
    return message;
  }

  public void setMessage(Object message) {
    this.message = message;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationPost notificationPost = (NotificationPost) o;
    return Objects.equals(this.destination, notificationPost.destination) &&
        Objects.equals(this.messageSchema, notificationPost.messageSchema) &&
        Objects.equals(this.author, notificationPost.author) &&
        Objects.equals(this.message, notificationPost.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destination, messageSchema, author, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationPost {\n");
    
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    messageSchema: ").append(toIndentedString(messageSchema)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

